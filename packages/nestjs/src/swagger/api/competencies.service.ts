/**
 * Competence Repository
 * The API description of the Competence Repository.
 *
 * OpenAPI spec version: 0.3.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CompetenceCreationDto } from '../model/competenceCreationDto';
import { CompetenceDto } from '../model/competenceDto';
import { CompetenceListDto } from '../model/competenceListDto';
import { RepositoryCreationDto } from '../model/repositoryCreationDto';
import { RepositoryDto } from '../model/repositoryDto';
import { RepositoryListDto } from '../model/repositoryListDto';
import { RepositorySearchDto } from '../model/repositorySearchDto';
import { ResolvedRepositoryDto } from '../model/resolvedRepositoryDto';
import { UberCompetenceResolveRequestDto } from '../model/uberCompetenceResolveRequestDto';
import { UeberCompetenceCreationDto } from '../model/ueberCompetenceCreationDto';
import { UeberCompetenceModificationDto } from '../model/ueberCompetenceModificationDto';
import { UnResolvedUeberCompetenceDto } from '../model/unResolvedUeberCompetenceDto';
import { UnresolvedRepositoryDto } from '../model/unresolvedRepositoryDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CompetenciesService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Creates a new competence at the specified repository and returns the created competence.
     * @param body 
     * @param repositoryId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public repositoryMgmtControllerAddCompetence(body: CompetenceCreationDto, repositoryId: string, observe?: 'body', reportProgress?: boolean): Observable<CompetenceDto>;
    public repositoryMgmtControllerAddCompetence(body: CompetenceCreationDto, repositoryId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompetenceDto>>;
    public repositoryMgmtControllerAddCompetence(body: CompetenceCreationDto, repositoryId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompetenceDto>>;
    public repositoryMgmtControllerAddCompetence(body: CompetenceCreationDto, repositoryId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling repositoryMgmtControllerAddCompetence.');
        }

        if (repositoryId === null || repositoryId === undefined) {
            throw new Error('Required parameter repositoryId was null or undefined when calling repositoryMgmtControllerAddCompetence.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CompetenceDto>('post',`${this.basePath}/repositories/${encodeURIComponent(String(repositoryId))}/competencies/add_competence`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param repositoryId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public repositoryMgmtControllerAddUeberCompetence(body: UeberCompetenceCreationDto, repositoryId: string, observe?: 'body', reportProgress?: boolean): Observable<UnResolvedUeberCompetenceDto>;
    public repositoryMgmtControllerAddUeberCompetence(body: UeberCompetenceCreationDto, repositoryId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UnResolvedUeberCompetenceDto>>;
    public repositoryMgmtControllerAddUeberCompetence(body: UeberCompetenceCreationDto, repositoryId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UnResolvedUeberCompetenceDto>>;
    public repositoryMgmtControllerAddUeberCompetence(body: UeberCompetenceCreationDto, repositoryId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling repositoryMgmtControllerAddUeberCompetence.');
        }

        if (repositoryId === null || repositoryId === undefined) {
            throw new Error('Required parameter repositoryId was null or undefined when calling repositoryMgmtControllerAddUeberCompetence.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<UnResolvedUeberCompetenceDto>('post',`${this.basePath}/repositories/${encodeURIComponent(String(repositoryId))}/competencies/add_uebercompetence`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Creates a new competence repository for the specified user.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public repositoryMgmtControllerCreateRepository(body: RepositoryCreationDto, observe?: 'body', reportProgress?: boolean): Observable<RepositoryDto>;
    public repositoryMgmtControllerCreateRepository(body: RepositoryCreationDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RepositoryDto>>;
    public repositoryMgmtControllerCreateRepository(body: RepositoryCreationDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RepositoryDto>>;
    public repositoryMgmtControllerCreateRepository(body: RepositoryCreationDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling repositoryMgmtControllerCreateRepository.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<RepositoryDto>('post',`${this.basePath}/repositories/create`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns the specified Competence.
     * @param competenceId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public repositoryMgmtControllerGetCompetence(competenceId: string, observe?: 'body', reportProgress?: boolean): Observable<CompetenceDto>;
    public repositoryMgmtControllerGetCompetence(competenceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompetenceDto>>;
    public repositoryMgmtControllerGetCompetence(competenceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompetenceDto>>;
    public repositoryMgmtControllerGetCompetence(competenceId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (competenceId === null || competenceId === undefined) {
            throw new Error('Required parameter competenceId was null or undefined when calling repositoryMgmtControllerGetCompetence.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CompetenceDto>('get',`${this.basePath}/repositories/competencies/${encodeURIComponent(String(competenceId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns the specified Uber-Competence.
     * @param uebercompetenceId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public repositoryMgmtControllerGetUberCompetence(uebercompetenceId: string, observe?: 'body', reportProgress?: boolean): Observable<UnResolvedUeberCompetenceDto>;
    public repositoryMgmtControllerGetUberCompetence(uebercompetenceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UnResolvedUeberCompetenceDto>>;
    public repositoryMgmtControllerGetUberCompetence(uebercompetenceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UnResolvedUeberCompetenceDto>>;
    public repositoryMgmtControllerGetUberCompetence(uebercompetenceId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uebercompetenceId === null || uebercompetenceId === undefined) {
            throw new Error('Required parameter uebercompetenceId was null or undefined when calling repositoryMgmtControllerGetUberCompetence.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<UnResolvedUeberCompetenceDto>('get',`${this.basePath}/repositories/uber_competencies/${encodeURIComponent(String(uebercompetenceId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Lists all repositories of the specified user, without showing its content.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public repositoryMgmtControllerListRepositories(observe?: 'body', reportProgress?: boolean): Observable<RepositoryListDto>;
    public repositoryMgmtControllerListRepositories(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RepositoryListDto>>;
    public repositoryMgmtControllerListRepositories(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RepositoryListDto>>;
    public repositoryMgmtControllerListRepositories(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RepositoryListDto>('get',`${this.basePath}/repositories/showOwn`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns one repository and its unresolved elements. Competences and their relations are handled as IDs and need to be resolved on the client-side.
     * @param repositoryId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public repositoryMgmtControllerLoadRepository(repositoryId: string, observe?: 'body', reportProgress?: boolean): Observable<UnresolvedRepositoryDto>;
    public repositoryMgmtControllerLoadRepository(repositoryId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UnresolvedRepositoryDto>>;
    public repositoryMgmtControllerLoadRepository(repositoryId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UnresolvedRepositoryDto>>;
    public repositoryMgmtControllerLoadRepository(repositoryId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (repositoryId === null || repositoryId === undefined) {
            throw new Error('Required parameter repositoryId was null or undefined when calling repositoryMgmtControllerLoadRepository.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<UnresolvedRepositoryDto>('get',`${this.basePath}/repositories/${encodeURIComponent(String(repositoryId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns one resolved repository and its elements. Competencies and their relations are resolved at the server.
     * @param repositoryId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public repositoryMgmtControllerLoadResolvedRepository(repositoryId: string, observe?: 'body', reportProgress?: boolean): Observable<ResolvedRepositoryDto>;
    public repositoryMgmtControllerLoadResolvedRepository(repositoryId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResolvedRepositoryDto>>;
    public repositoryMgmtControllerLoadResolvedRepository(repositoryId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResolvedRepositoryDto>>;
    public repositoryMgmtControllerLoadResolvedRepository(repositoryId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (repositoryId === null || repositoryId === undefined) {
            throw new Error('Required parameter repositoryId was null or undefined when calling repositoryMgmtControllerLoadResolvedRepository.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResolvedRepositoryDto>('get',`${this.basePath}/repositories/resolve/${encodeURIComponent(String(repositoryId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param repositoryId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public repositoryMgmtControllerModify(body: UeberCompetenceModificationDto, repositoryId: string, observe?: 'body', reportProgress?: boolean): Observable<UnResolvedUeberCompetenceDto>;
    public repositoryMgmtControllerModify(body: UeberCompetenceModificationDto, repositoryId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UnResolvedUeberCompetenceDto>>;
    public repositoryMgmtControllerModify(body: UeberCompetenceModificationDto, repositoryId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UnResolvedUeberCompetenceDto>>;
    public repositoryMgmtControllerModify(body: UeberCompetenceModificationDto, repositoryId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling repositoryMgmtControllerModify.');
        }

        if (repositoryId === null || repositoryId === undefined) {
            throw new Error('Required parameter repositoryId was null or undefined when calling repositoryMgmtControllerModify.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<UnResolvedUeberCompetenceDto>('patch',`${this.basePath}/repositories/${encodeURIComponent(String(repositoryId))}/competencies/modify_uebercompetence`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param repositoryId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public repositoryMgmtControllerResolveToCompetencies(body: UberCompetenceResolveRequestDto, repositoryId: string, observe?: 'body', reportProgress?: boolean): Observable<CompetenceListDto>;
    public repositoryMgmtControllerResolveToCompetencies(body: UberCompetenceResolveRequestDto, repositoryId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompetenceListDto>>;
    public repositoryMgmtControllerResolveToCompetencies(body: UberCompetenceResolveRequestDto, repositoryId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompetenceListDto>>;
    public repositoryMgmtControllerResolveToCompetencies(body: UberCompetenceResolveRequestDto, repositoryId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling repositoryMgmtControllerResolveToCompetencies.');
        }

        if (repositoryId === null || repositoryId === undefined) {
            throw new Error('Required parameter repositoryId was null or undefined when calling repositoryMgmtControllerResolveToCompetencies.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CompetenceListDto>('post',`${this.basePath}/repositories/${encodeURIComponent(String(repositoryId))}/resolveUberCompetencies`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public repositoryMgmtControllerSearchForRepositories(body: RepositorySearchDto, observe?: 'body', reportProgress?: boolean): Observable<RepositoryListDto>;
    public repositoryMgmtControllerSearchForRepositories(body: RepositorySearchDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RepositoryListDto>>;
    public repositoryMgmtControllerSearchForRepositories(body: RepositorySearchDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RepositoryListDto>>;
    public repositoryMgmtControllerSearchForRepositories(body: RepositorySearchDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling repositoryMgmtControllerSearchForRepositories.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<RepositoryListDto>('post',`${this.basePath}/repositories`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
