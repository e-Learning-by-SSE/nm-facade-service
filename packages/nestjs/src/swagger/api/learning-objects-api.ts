/* tslint:disable */
/* eslint-disable */
/**
 * Competence Repository
 * The API description of the Competence Repository.
 *
 * OpenAPI spec version: 0.3.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { LearningObjectCreationDto } from '../model';
import { LearningObjectDto } from '../model';
import { LearningObjectGroupCreationDto } from '../model';
import { LearningObjectGroupDto } from '../model';
import { LearningObjectModificationDto } from '../model';
import { LoGoalCreationDto } from '../model';
import { LoGoalDto } from '../model';
import { LoRepositoryCreationDto } from '../model';
import { LoRepositoryDto } from '../model';
import { LoRepositoryListDto } from '../model';
import { LoRepositoryModifyDto } from '../model';
import { ShallowLoRepositoryDto } from '../model';
/**
 * LearningObjectsApi - axios parameter creator
 * @export
 */
export const LearningObjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoGoalCreationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loRepositoryControllerAddGoal: async (body: LoGoalCreationDto, repositoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling loRepositoryControllerAddGoal.');
            }
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling loRepositoryControllerAddGoal.');
            }
            const localVarPath = `/lo_repository/{repositoryId}/add_goal`
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LearningObjectGroupCreationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loRepositoryControllerAddLoGroup: async (body: LearningObjectGroupCreationDto, repositoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling loRepositoryControllerAddLoGroup.');
            }
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling loRepositoryControllerAddLoGroup.');
            }
            const localVarPath = `/lo_repository/{repositoryId}/add_learning_object_group`
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LearningObjectCreationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loRepositoryControllerCreateLearningObject: async (body: LearningObjectCreationDto, repositoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling loRepositoryControllerCreateLearningObject.');
            }
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling loRepositoryControllerCreateLearningObject.');
            }
            const localVarPath = `/lo_repository/{repositoryId}/add_learning_object`
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoRepositoryCreationDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loRepositoryControllerCreateRepository: async (body: LoRepositoryCreationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling loRepositoryControllerCreateRepository.');
            }
            const localVarPath = `/lo_repository/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loRepositoryControllerGetLoGroup: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling loRepositoryControllerGetLoGroup.');
            }
            const localVarPath = `/lo_repository/learning_object_groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loRepositoryControllerListRepositories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lo_repository`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} learningObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loRepositoryControllerLoadLearningObject: async (learningObjectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'learningObjectId' is not null or undefined
            if (learningObjectId === null || learningObjectId === undefined) {
                throw new RequiredError('learningObjectId','Required parameter learningObjectId was null or undefined when calling loRepositoryControllerLoadLearningObject.');
            }
            const localVarPath = `/lo_repository/learning_objects/{learningObjectId}`
                .replace(`{${"learningObjectId"}}`, encodeURIComponent(String(learningObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loRepositoryControllerLoadRepository: async (repositoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling loRepositoryControllerLoadRepository.');
            }
            const localVarPath = `/lo_repository/{repositoryId}`
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LearningObjectModificationDto} body 
         * @param {string} repositoryId 
         * @param {string} learningObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loRepositoryControllerModifyLearningObject: async (body: LearningObjectModificationDto, repositoryId: string, learningObjectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling loRepositoryControllerModifyLearningObject.');
            }
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling loRepositoryControllerModifyLearningObject.');
            }
            // verify required parameter 'learningObjectId' is not null or undefined
            if (learningObjectId === null || learningObjectId === undefined) {
                throw new RequiredError('learningObjectId','Required parameter learningObjectId was null or undefined when calling loRepositoryControllerModifyLearningObject.');
            }
            const localVarPath = `/lo_repository/{repositoryId}/{learningObjectId}`
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)))
                .replace(`{${"learningObjectId"}}`, encodeURIComponent(String(learningObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoRepositoryModifyDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loRepositoryControllerModifyRepository: async (body: LoRepositoryModifyDto, repositoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling loRepositoryControllerModifyRepository.');
            }
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling loRepositoryControllerModifyRepository.');
            }
            const localVarPath = `/lo_repository/{repositoryId}`
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} goalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loRepositoryControllerShowGoal: async (goalId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalId' is not null or undefined
            if (goalId === null || goalId === undefined) {
                throw new RequiredError('goalId','Required parameter goalId was null or undefined when calling loRepositoryControllerShowGoal.');
            }
            const localVarPath = `/lo_repository/goals/{goalId}`
                .replace(`{${"goalId"}}`, encodeURIComponent(String(goalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LearningObjectsApi - functional programming interface
 * @export
 */
export const LearningObjectsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoGoalCreationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerAddGoal(body: LoGoalCreationDto, repositoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LoGoalDto>>> {
            const localVarAxiosArgs = await LearningObjectsApiAxiosParamCreator(configuration).loRepositoryControllerAddGoal(body, repositoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {LearningObjectGroupCreationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerAddLoGroup(body: LearningObjectGroupCreationDto, repositoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LearningObjectGroupDto>>> {
            const localVarAxiosArgs = await LearningObjectsApiAxiosParamCreator(configuration).loRepositoryControllerAddLoGroup(body, repositoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {LearningObjectCreationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerCreateLearningObject(body: LearningObjectCreationDto, repositoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LearningObjectDto>>> {
            const localVarAxiosArgs = await LearningObjectsApiAxiosParamCreator(configuration).loRepositoryControllerCreateLearningObject(body, repositoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {LoRepositoryCreationDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerCreateRepository(body: LoRepositoryCreationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ShallowLoRepositoryDto>>> {
            const localVarAxiosArgs = await LearningObjectsApiAxiosParamCreator(configuration).loRepositoryControllerCreateRepository(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerGetLoGroup(groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LearningObjectGroupDto>>> {
            const localVarAxiosArgs = await LearningObjectsApiAxiosParamCreator(configuration).loRepositoryControllerGetLoGroup(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerListRepositories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LoRepositoryListDto>>> {
            const localVarAxiosArgs = await LearningObjectsApiAxiosParamCreator(configuration).loRepositoryControllerListRepositories(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} learningObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerLoadLearningObject(learningObjectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LearningObjectDto>>> {
            const localVarAxiosArgs = await LearningObjectsApiAxiosParamCreator(configuration).loRepositoryControllerLoadLearningObject(learningObjectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerLoadRepository(repositoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LoRepositoryDto>>> {
            const localVarAxiosArgs = await LearningObjectsApiAxiosParamCreator(configuration).loRepositoryControllerLoadRepository(repositoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {LearningObjectModificationDto} body 
         * @param {string} repositoryId 
         * @param {string} learningObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerModifyLearningObject(body: LearningObjectModificationDto, repositoryId: string, learningObjectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LearningObjectDto>>> {
            const localVarAxiosArgs = await LearningObjectsApiAxiosParamCreator(configuration).loRepositoryControllerModifyLearningObject(body, repositoryId, learningObjectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {LoRepositoryModifyDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerModifyRepository(body: LoRepositoryModifyDto, repositoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LoRepositoryDto>>> {
            const localVarAxiosArgs = await LearningObjectsApiAxiosParamCreator(configuration).loRepositoryControllerModifyRepository(body, repositoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} goalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerShowGoal(goalId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LoGoalDto>>> {
            const localVarAxiosArgs = await LearningObjectsApiAxiosParamCreator(configuration).loRepositoryControllerShowGoal(goalId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LearningObjectsApi - factory interface
 * @export
 */
export const LearningObjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {LoGoalCreationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerAddGoal(body: LoGoalCreationDto, repositoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<LoGoalDto>> {
            return LearningObjectsApiFp(configuration).loRepositoryControllerAddGoal(body, repositoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LearningObjectGroupCreationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerAddLoGroup(body: LearningObjectGroupCreationDto, repositoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<LearningObjectGroupDto>> {
            return LearningObjectsApiFp(configuration).loRepositoryControllerAddLoGroup(body, repositoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LearningObjectCreationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerCreateLearningObject(body: LearningObjectCreationDto, repositoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<LearningObjectDto>> {
            return LearningObjectsApiFp(configuration).loRepositoryControllerCreateLearningObject(body, repositoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoRepositoryCreationDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerCreateRepository(body: LoRepositoryCreationDto, options?: AxiosRequestConfig): Promise<AxiosResponse<ShallowLoRepositoryDto>> {
            return LearningObjectsApiFp(configuration).loRepositoryControllerCreateRepository(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerGetLoGroup(groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<LearningObjectGroupDto>> {
            return LearningObjectsApiFp(configuration).loRepositoryControllerGetLoGroup(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerListRepositories(options?: AxiosRequestConfig): Promise<AxiosResponse<LoRepositoryListDto>> {
            return LearningObjectsApiFp(configuration).loRepositoryControllerListRepositories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} learningObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerLoadLearningObject(learningObjectId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<LearningObjectDto>> {
            return LearningObjectsApiFp(configuration).loRepositoryControllerLoadLearningObject(learningObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerLoadRepository(repositoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<LoRepositoryDto>> {
            return LearningObjectsApiFp(configuration).loRepositoryControllerLoadRepository(repositoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LearningObjectModificationDto} body 
         * @param {string} repositoryId 
         * @param {string} learningObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerModifyLearningObject(body: LearningObjectModificationDto, repositoryId: string, learningObjectId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<LearningObjectDto>> {
            return LearningObjectsApiFp(configuration).loRepositoryControllerModifyLearningObject(body, repositoryId, learningObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoRepositoryModifyDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerModifyRepository(body: LoRepositoryModifyDto, repositoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<LoRepositoryDto>> {
            return LearningObjectsApiFp(configuration).loRepositoryControllerModifyRepository(body, repositoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} goalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loRepositoryControllerShowGoal(goalId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<LoGoalDto>> {
            return LearningObjectsApiFp(configuration).loRepositoryControllerShowGoal(goalId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LearningObjectsApi - object-oriented interface
 * @export
 * @class LearningObjectsApi
 * @extends {BaseAPI}
 */
export class LearningObjectsApi extends BaseAPI {
    /**
     * 
     * @param {LoGoalCreationDto} body 
     * @param {string} repositoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningObjectsApi
     */
    public async loRepositoryControllerAddGoal(body: LoGoalCreationDto, repositoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<LoGoalDto>> {
        return LearningObjectsApiFp(this.configuration).loRepositoryControllerAddGoal(body, repositoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {LearningObjectGroupCreationDto} body 
     * @param {string} repositoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningObjectsApi
     */
    public async loRepositoryControllerAddLoGroup(body: LearningObjectGroupCreationDto, repositoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<LearningObjectGroupDto>> {
        return LearningObjectsApiFp(this.configuration).loRepositoryControllerAddLoGroup(body, repositoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {LearningObjectCreationDto} body 
     * @param {string} repositoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningObjectsApi
     */
    public async loRepositoryControllerCreateLearningObject(body: LearningObjectCreationDto, repositoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<LearningObjectDto>> {
        return LearningObjectsApiFp(this.configuration).loRepositoryControllerCreateLearningObject(body, repositoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {LoRepositoryCreationDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningObjectsApi
     */
    public async loRepositoryControllerCreateRepository(body: LoRepositoryCreationDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<ShallowLoRepositoryDto>> {
        return LearningObjectsApiFp(this.configuration).loRepositoryControllerCreateRepository(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningObjectsApi
     */
    public async loRepositoryControllerGetLoGroup(groupId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<LearningObjectGroupDto>> {
        return LearningObjectsApiFp(this.configuration).loRepositoryControllerGetLoGroup(groupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningObjectsApi
     */
    public async loRepositoryControllerListRepositories(options?: AxiosRequestConfig) : Promise<AxiosResponse<LoRepositoryListDto>> {
        return LearningObjectsApiFp(this.configuration).loRepositoryControllerListRepositories(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} learningObjectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningObjectsApi
     */
    public async loRepositoryControllerLoadLearningObject(learningObjectId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<LearningObjectDto>> {
        return LearningObjectsApiFp(this.configuration).loRepositoryControllerLoadLearningObject(learningObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} repositoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningObjectsApi
     */
    public async loRepositoryControllerLoadRepository(repositoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<LoRepositoryDto>> {
        return LearningObjectsApiFp(this.configuration).loRepositoryControllerLoadRepository(repositoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {LearningObjectModificationDto} body 
     * @param {string} repositoryId 
     * @param {string} learningObjectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningObjectsApi
     */
    public async loRepositoryControllerModifyLearningObject(body: LearningObjectModificationDto, repositoryId: string, learningObjectId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<LearningObjectDto>> {
        return LearningObjectsApiFp(this.configuration).loRepositoryControllerModifyLearningObject(body, repositoryId, learningObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {LoRepositoryModifyDto} body 
     * @param {string} repositoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningObjectsApi
     */
    public async loRepositoryControllerModifyRepository(body: LoRepositoryModifyDto, repositoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<LoRepositoryDto>> {
        return LearningObjectsApiFp(this.configuration).loRepositoryControllerModifyRepository(body, repositoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} goalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningObjectsApi
     */
    public async loRepositoryControllerShowGoal(goalId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<LoGoalDto>> {
        return LearningObjectsApiFp(this.configuration).loRepositoryControllerShowGoal(goalId, options).then((request) => request(this.axios, this.basePath));
    }
}
