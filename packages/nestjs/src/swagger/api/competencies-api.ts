/* tslint:disable */
/* eslint-disable */
/**
 * Competence Repository
 * The API description of the Competence Repository.
 *
 * OpenAPI spec version: 0.3.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CompetenceCreationDto } from '../model';
import { CompetenceDto } from '../model';
import { CompetenceListDto } from '../model';
import { RepositoryCreationDto } from '../model';
import { RepositoryDto } from '../model';
import { RepositoryListDto } from '../model';
import { RepositorySearchDto } from '../model';
import { ResolvedRepositoryDto } from '../model';
import { UberCompetenceResolveRequestDto } from '../model';
import { UeberCompetenceCreationDto } from '../model';
import { UeberCompetenceModificationDto } from '../model';
import { UnResolvedUeberCompetenceDto } from '../model';
import { UnresolvedRepositoryDto } from '../model';
/**
 * CompetenciesApi - axios parameter creator
 * @export
 */
export const CompetenciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new competence at the specified repository and returns the created competence.
         * @param {CompetenceCreationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryMgmtControllerAddCompetence: async (body: CompetenceCreationDto, repositoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling repositoryMgmtControllerAddCompetence.');
            }
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling repositoryMgmtControllerAddCompetence.');
            }
            const localVarPath = `/repositories/{repositoryId}/competencies/add_competence`
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UeberCompetenceCreationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryMgmtControllerAddUeberCompetence: async (body: UeberCompetenceCreationDto, repositoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling repositoryMgmtControllerAddUeberCompetence.');
            }
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling repositoryMgmtControllerAddUeberCompetence.');
            }
            const localVarPath = `/repositories/{repositoryId}/competencies/add_uebercompetence`
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new competence repository for the specified user.
         * @param {RepositoryCreationDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryMgmtControllerCreateRepository: async (body: RepositoryCreationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling repositoryMgmtControllerCreateRepository.');
            }
            const localVarPath = `/repositories/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the specified Competence.
         * @param {string} competenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryMgmtControllerGetCompetence: async (competenceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competenceId' is not null or undefined
            if (competenceId === null || competenceId === undefined) {
                throw new RequiredError('competenceId','Required parameter competenceId was null or undefined when calling repositoryMgmtControllerGetCompetence.');
            }
            const localVarPath = `/repositories/competencies/{competenceId}`
                .replace(`{${"competenceId"}}`, encodeURIComponent(String(competenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the specified Uber-Competence.
         * @param {string} uebercompetenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryMgmtControllerGetUberCompetence: async (uebercompetenceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uebercompetenceId' is not null or undefined
            if (uebercompetenceId === null || uebercompetenceId === undefined) {
                throw new RequiredError('uebercompetenceId','Required parameter uebercompetenceId was null or undefined when calling repositoryMgmtControllerGetUberCompetence.');
            }
            const localVarPath = `/repositories/uber_competencies/{uebercompetenceId}`
                .replace(`{${"uebercompetenceId"}}`, encodeURIComponent(String(uebercompetenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all repositories of the specified user, without showing its content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryMgmtControllerListRepositories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/repositories/showOwn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns one repository and its unresolved elements. Competences and their relations are handled as IDs and need to be resolved on the client-side.
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryMgmtControllerLoadRepository: async (repositoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling repositoryMgmtControllerLoadRepository.');
            }
            const localVarPath = `/repositories/{repositoryId}`
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns one resolved repository and its elements. Competencies and their relations are resolved at the server.
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryMgmtControllerLoadResolvedRepository: async (repositoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling repositoryMgmtControllerLoadResolvedRepository.');
            }
            const localVarPath = `/repositories/resolve/{repositoryId}`
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UeberCompetenceModificationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryMgmtControllerModify: async (body: UeberCompetenceModificationDto, repositoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling repositoryMgmtControllerModify.');
            }
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling repositoryMgmtControllerModify.');
            }
            const localVarPath = `/repositories/{repositoryId}/competencies/modify_uebercompetence`
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UberCompetenceResolveRequestDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryMgmtControllerResolveToCompetencies: async (body: UberCompetenceResolveRequestDto, repositoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling repositoryMgmtControllerResolveToCompetencies.');
            }
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling repositoryMgmtControllerResolveToCompetencies.');
            }
            const localVarPath = `/repositories/{repositoryId}/resolveUberCompetencies`
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RepositorySearchDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryMgmtControllerSearchForRepositories: async (body: RepositorySearchDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling repositoryMgmtControllerSearchForRepositories.');
            }
            const localVarPath = `/repositories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompetenciesApi - functional programming interface
 * @export
 */
export const CompetenciesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new competence at the specified repository and returns the created competence.
         * @param {CompetenceCreationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerAddCompetence(body: CompetenceCreationDto, repositoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CompetenceDto>>> {
            const localVarAxiosArgs = await CompetenciesApiAxiosParamCreator(configuration).repositoryMgmtControllerAddCompetence(body, repositoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UeberCompetenceCreationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerAddUeberCompetence(body: UeberCompetenceCreationDto, repositoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UnResolvedUeberCompetenceDto>>> {
            const localVarAxiosArgs = await CompetenciesApiAxiosParamCreator(configuration).repositoryMgmtControllerAddUeberCompetence(body, repositoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new competence repository for the specified user.
         * @param {RepositoryCreationDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerCreateRepository(body: RepositoryCreationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RepositoryDto>>> {
            const localVarAxiosArgs = await CompetenciesApiAxiosParamCreator(configuration).repositoryMgmtControllerCreateRepository(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the specified Competence.
         * @param {string} competenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerGetCompetence(competenceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CompetenceDto>>> {
            const localVarAxiosArgs = await CompetenciesApiAxiosParamCreator(configuration).repositoryMgmtControllerGetCompetence(competenceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the specified Uber-Competence.
         * @param {string} uebercompetenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerGetUberCompetence(uebercompetenceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UnResolvedUeberCompetenceDto>>> {
            const localVarAxiosArgs = await CompetenciesApiAxiosParamCreator(configuration).repositoryMgmtControllerGetUberCompetence(uebercompetenceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all repositories of the specified user, without showing its content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerListRepositories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RepositoryListDto>>> {
            const localVarAxiosArgs = await CompetenciesApiAxiosParamCreator(configuration).repositoryMgmtControllerListRepositories(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns one repository and its unresolved elements. Competences and their relations are handled as IDs and need to be resolved on the client-side.
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerLoadRepository(repositoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UnresolvedRepositoryDto>>> {
            const localVarAxiosArgs = await CompetenciesApiAxiosParamCreator(configuration).repositoryMgmtControllerLoadRepository(repositoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns one resolved repository and its elements. Competencies and their relations are resolved at the server.
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerLoadResolvedRepository(repositoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResolvedRepositoryDto>>> {
            const localVarAxiosArgs = await CompetenciesApiAxiosParamCreator(configuration).repositoryMgmtControllerLoadResolvedRepository(repositoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UeberCompetenceModificationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerModify(body: UeberCompetenceModificationDto, repositoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UnResolvedUeberCompetenceDto>>> {
            const localVarAxiosArgs = await CompetenciesApiAxiosParamCreator(configuration).repositoryMgmtControllerModify(body, repositoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UberCompetenceResolveRequestDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerResolveToCompetencies(body: UberCompetenceResolveRequestDto, repositoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CompetenceListDto>>> {
            const localVarAxiosArgs = await CompetenciesApiAxiosParamCreator(configuration).repositoryMgmtControllerResolveToCompetencies(body, repositoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {RepositorySearchDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerSearchForRepositories(body: RepositorySearchDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RepositoryListDto>>> {
            const localVarAxiosArgs = await CompetenciesApiAxiosParamCreator(configuration).repositoryMgmtControllerSearchForRepositories(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CompetenciesApi - factory interface
 * @export
 */
export const CompetenciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new competence at the specified repository and returns the created competence.
         * @param {CompetenceCreationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerAddCompetence(body: CompetenceCreationDto, repositoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CompetenceDto>> {
            return CompetenciesApiFp(configuration).repositoryMgmtControllerAddCompetence(body, repositoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UeberCompetenceCreationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerAddUeberCompetence(body: UeberCompetenceCreationDto, repositoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UnResolvedUeberCompetenceDto>> {
            return CompetenciesApiFp(configuration).repositoryMgmtControllerAddUeberCompetence(body, repositoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new competence repository for the specified user.
         * @param {RepositoryCreationDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerCreateRepository(body: RepositoryCreationDto, options?: AxiosRequestConfig): Promise<AxiosResponse<RepositoryDto>> {
            return CompetenciesApiFp(configuration).repositoryMgmtControllerCreateRepository(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the specified Competence.
         * @param {string} competenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerGetCompetence(competenceId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CompetenceDto>> {
            return CompetenciesApiFp(configuration).repositoryMgmtControllerGetCompetence(competenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the specified Uber-Competence.
         * @param {string} uebercompetenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerGetUberCompetence(uebercompetenceId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UnResolvedUeberCompetenceDto>> {
            return CompetenciesApiFp(configuration).repositoryMgmtControllerGetUberCompetence(uebercompetenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all repositories of the specified user, without showing its content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerListRepositories(options?: AxiosRequestConfig): Promise<AxiosResponse<RepositoryListDto>> {
            return CompetenciesApiFp(configuration).repositoryMgmtControllerListRepositories(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns one repository and its unresolved elements. Competences and their relations are handled as IDs and need to be resolved on the client-side.
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerLoadRepository(repositoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UnresolvedRepositoryDto>> {
            return CompetenciesApiFp(configuration).repositoryMgmtControllerLoadRepository(repositoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns one resolved repository and its elements. Competencies and their relations are resolved at the server.
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerLoadResolvedRepository(repositoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResolvedRepositoryDto>> {
            return CompetenciesApiFp(configuration).repositoryMgmtControllerLoadResolvedRepository(repositoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UeberCompetenceModificationDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerModify(body: UeberCompetenceModificationDto, repositoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UnResolvedUeberCompetenceDto>> {
            return CompetenciesApiFp(configuration).repositoryMgmtControllerModify(body, repositoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UberCompetenceResolveRequestDto} body 
         * @param {string} repositoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerResolveToCompetencies(body: UberCompetenceResolveRequestDto, repositoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CompetenceListDto>> {
            return CompetenciesApiFp(configuration).repositoryMgmtControllerResolveToCompetencies(body, repositoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RepositorySearchDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryMgmtControllerSearchForRepositories(body: RepositorySearchDto, options?: AxiosRequestConfig): Promise<AxiosResponse<RepositoryListDto>> {
            return CompetenciesApiFp(configuration).repositoryMgmtControllerSearchForRepositories(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompetenciesApi - object-oriented interface
 * @export
 * @class CompetenciesApi
 * @extends {BaseAPI}
 */
export class CompetenciesApi extends BaseAPI {
    /**
     * Creates a new competence at the specified repository and returns the created competence.
     * @param {CompetenceCreationDto} body 
     * @param {string} repositoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetenciesApi
     */
    public async repositoryMgmtControllerAddCompetence(body: CompetenceCreationDto, repositoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CompetenceDto>> {
        return CompetenciesApiFp(this.configuration).repositoryMgmtControllerAddCompetence(body, repositoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {UeberCompetenceCreationDto} body 
     * @param {string} repositoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetenciesApi
     */
    public async repositoryMgmtControllerAddUeberCompetence(body: UeberCompetenceCreationDto, repositoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UnResolvedUeberCompetenceDto>> {
        return CompetenciesApiFp(this.configuration).repositoryMgmtControllerAddUeberCompetence(body, repositoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new competence repository for the specified user.
     * @param {RepositoryCreationDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetenciesApi
     */
    public async repositoryMgmtControllerCreateRepository(body: RepositoryCreationDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<RepositoryDto>> {
        return CompetenciesApiFp(this.configuration).repositoryMgmtControllerCreateRepository(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the specified Competence.
     * @param {string} competenceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetenciesApi
     */
    public async repositoryMgmtControllerGetCompetence(competenceId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CompetenceDto>> {
        return CompetenciesApiFp(this.configuration).repositoryMgmtControllerGetCompetence(competenceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the specified Uber-Competence.
     * @param {string} uebercompetenceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetenciesApi
     */
    public async repositoryMgmtControllerGetUberCompetence(uebercompetenceId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UnResolvedUeberCompetenceDto>> {
        return CompetenciesApiFp(this.configuration).repositoryMgmtControllerGetUberCompetence(uebercompetenceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all repositories of the specified user, without showing its content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetenciesApi
     */
    public async repositoryMgmtControllerListRepositories(options?: AxiosRequestConfig) : Promise<AxiosResponse<RepositoryListDto>> {
        return CompetenciesApiFp(this.configuration).repositoryMgmtControllerListRepositories(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns one repository and its unresolved elements. Competences and their relations are handled as IDs and need to be resolved on the client-side.
     * @param {string} repositoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetenciesApi
     */
    public async repositoryMgmtControllerLoadRepository(repositoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UnresolvedRepositoryDto>> {
        return CompetenciesApiFp(this.configuration).repositoryMgmtControllerLoadRepository(repositoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns one resolved repository and its elements. Competencies and their relations are resolved at the server.
     * @param {string} repositoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetenciesApi
     */
    public async repositoryMgmtControllerLoadResolvedRepository(repositoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResolvedRepositoryDto>> {
        return CompetenciesApiFp(this.configuration).repositoryMgmtControllerLoadResolvedRepository(repositoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {UeberCompetenceModificationDto} body 
     * @param {string} repositoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetenciesApi
     */
    public async repositoryMgmtControllerModify(body: UeberCompetenceModificationDto, repositoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UnResolvedUeberCompetenceDto>> {
        return CompetenciesApiFp(this.configuration).repositoryMgmtControllerModify(body, repositoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {UberCompetenceResolveRequestDto} body 
     * @param {string} repositoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetenciesApi
     */
    public async repositoryMgmtControllerResolveToCompetencies(body: UberCompetenceResolveRequestDto, repositoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CompetenceListDto>> {
        return CompetenciesApiFp(this.configuration).repositoryMgmtControllerResolveToCompetencies(body, repositoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {RepositorySearchDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetenciesApi
     */
    public async repositoryMgmtControllerSearchForRepositories(body: RepositorySearchDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<RepositoryListDto>> {
        return CompetenciesApiFp(this.configuration).repositoryMgmtControllerSearchForRepositories(body, options).then((request) => request(this.axios, this.basePath));
    }
}
