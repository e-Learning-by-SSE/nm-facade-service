/*
 * Competence Repository
 * The API description of the Competence Repository.
 *
 * OpenAPI spec version: 0.3.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CompetenceCreationDto} from '../model/CompetenceCreationDto';
import {CompetenceDto} from '../model/CompetenceDto';
import {CompetenceListDto} from '../model/CompetenceListDto';
import {RepositoryCreationDto} from '../model/RepositoryCreationDto';
import {RepositoryDto} from '../model/RepositoryDto';
import {RepositoryListDto} from '../model/RepositoryListDto';
import {RepositorySearchDto} from '../model/RepositorySearchDto';
import {ResolvedRepositoryDto} from '../model/ResolvedRepositoryDto';
import {UberCompetenceResolveRequestDto} from '../model/UberCompetenceResolveRequestDto';
import {UeberCompetenceCreationDto} from '../model/UeberCompetenceCreationDto';
import {UeberCompetenceModificationDto} from '../model/UeberCompetenceModificationDto';
import {UnResolvedUeberCompetenceDto} from '../model/UnResolvedUeberCompetenceDto';
import {UnresolvedRepositoryDto} from '../model/UnresolvedRepositoryDto';

/**
* Competencies service.
* @module api/CompetenciesApi
* @version 0.3.2
*/
export class CompetenciesApi {

    /**
    * Constructs a new CompetenciesApi. 
    * @alias module:api/CompetenciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the repositoryMgmtControllerAddCompetence operation.
     * @callback moduleapi/CompetenciesApi~repositoryMgmtControllerAddCompetenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetenceDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new competence at the specified repository and returns the created competence.
     * @param {module:model/CompetenceCreationDto} body 
     * @param {String} repositoryId 
     * @param {module:api/CompetenciesApi~repositoryMgmtControllerAddCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    repositoryMgmtControllerAddCompetence(body, repositoryId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling repositoryMgmtControllerAddCompetence");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling repositoryMgmtControllerAddCompetence");
      }

      let pathParams = {
        'repositoryId': repositoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompetenceDto;

      return this.apiClient.callApi(
        '/repositories/{repositoryId}/competencies/add_competence', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the repositoryMgmtControllerAddUeberCompetence operation.
     * @callback moduleapi/CompetenciesApi~repositoryMgmtControllerAddUeberCompetenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnResolvedUeberCompetenceDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UeberCompetenceCreationDto} body 
     * @param {String} repositoryId 
     * @param {module:api/CompetenciesApi~repositoryMgmtControllerAddUeberCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    repositoryMgmtControllerAddUeberCompetence(body, repositoryId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling repositoryMgmtControllerAddUeberCompetence");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling repositoryMgmtControllerAddUeberCompetence");
      }

      let pathParams = {
        'repositoryId': repositoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UnResolvedUeberCompetenceDto;

      return this.apiClient.callApi(
        '/repositories/{repositoryId}/competencies/add_uebercompetence', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the repositoryMgmtControllerCreateRepository operation.
     * @callback moduleapi/CompetenciesApi~repositoryMgmtControllerCreateRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepositoryDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new competence repository for the specified user.
     * @param {module:model/RepositoryCreationDto} body 
     * @param {module:api/CompetenciesApi~repositoryMgmtControllerCreateRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    repositoryMgmtControllerCreateRepository(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling repositoryMgmtControllerCreateRepository");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepositoryDto;

      return this.apiClient.callApi(
        '/repositories/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the repositoryMgmtControllerGetCompetence operation.
     * @callback moduleapi/CompetenciesApi~repositoryMgmtControllerGetCompetenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetenceDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the specified Competence.
     * @param {String} competenceId 
     * @param {module:api/CompetenciesApi~repositoryMgmtControllerGetCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    repositoryMgmtControllerGetCompetence(competenceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'competenceId' is set
      if (competenceId === undefined || competenceId === null) {
        throw new Error("Missing the required parameter 'competenceId' when calling repositoryMgmtControllerGetCompetence");
      }

      let pathParams = {
        'competenceId': competenceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompetenceDto;

      return this.apiClient.callApi(
        '/repositories/competencies/{competenceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the repositoryMgmtControllerGetUberCompetence operation.
     * @callback moduleapi/CompetenciesApi~repositoryMgmtControllerGetUberCompetenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnResolvedUeberCompetenceDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the specified Uber-Competence.
     * @param {String} uebercompetenceId 
     * @param {module:api/CompetenciesApi~repositoryMgmtControllerGetUberCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    repositoryMgmtControllerGetUberCompetence(uebercompetenceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'uebercompetenceId' is set
      if (uebercompetenceId === undefined || uebercompetenceId === null) {
        throw new Error("Missing the required parameter 'uebercompetenceId' when calling repositoryMgmtControllerGetUberCompetence");
      }

      let pathParams = {
        'uebercompetenceId': uebercompetenceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnResolvedUeberCompetenceDto;

      return this.apiClient.callApi(
        '/repositories/uber_competencies/{uebercompetenceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the repositoryMgmtControllerListRepositories operation.
     * @callback moduleapi/CompetenciesApi~repositoryMgmtControllerListRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepositoryListDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all repositories of the specified user, without showing its content.
     * @param {module:api/CompetenciesApi~repositoryMgmtControllerListRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    repositoryMgmtControllerListRepositories(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepositoryListDto;

      return this.apiClient.callApi(
        '/repositories/showOwn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the repositoryMgmtControllerLoadRepository operation.
     * @callback moduleapi/CompetenciesApi~repositoryMgmtControllerLoadRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnresolvedRepositoryDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns one repository and its unresolved elements. Competences and their relations are handled as IDs and need to be resolved on the client-side.
     * @param {String} repositoryId 
     * @param {module:api/CompetenciesApi~repositoryMgmtControllerLoadRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    repositoryMgmtControllerLoadRepository(repositoryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling repositoryMgmtControllerLoadRepository");
      }

      let pathParams = {
        'repositoryId': repositoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnresolvedRepositoryDto;

      return this.apiClient.callApi(
        '/repositories/{repositoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the repositoryMgmtControllerLoadResolvedRepository operation.
     * @callback moduleapi/CompetenciesApi~repositoryMgmtControllerLoadResolvedRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResolvedRepositoryDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns one resolved repository and its elements. Competencies and their relations are resolved at the server.
     * @param {String} repositoryId 
     * @param {module:api/CompetenciesApi~repositoryMgmtControllerLoadResolvedRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    repositoryMgmtControllerLoadResolvedRepository(repositoryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling repositoryMgmtControllerLoadResolvedRepository");
      }

      let pathParams = {
        'repositoryId': repositoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResolvedRepositoryDto;

      return this.apiClient.callApi(
        '/repositories/resolve/{repositoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the repositoryMgmtControllerModify operation.
     * @callback moduleapi/CompetenciesApi~repositoryMgmtControllerModifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnResolvedUeberCompetenceDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UeberCompetenceModificationDto} body 
     * @param {String} repositoryId 
     * @param {module:api/CompetenciesApi~repositoryMgmtControllerModifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    repositoryMgmtControllerModify(body, repositoryId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling repositoryMgmtControllerModify");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling repositoryMgmtControllerModify");
      }

      let pathParams = {
        'repositoryId': repositoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UnResolvedUeberCompetenceDto;

      return this.apiClient.callApi(
        '/repositories/{repositoryId}/competencies/modify_uebercompetence', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the repositoryMgmtControllerResolveToCompetencies operation.
     * @callback moduleapi/CompetenciesApi~repositoryMgmtControllerResolveToCompetenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetenceListDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UberCompetenceResolveRequestDto} body 
     * @param {String} repositoryId 
     * @param {module:api/CompetenciesApi~repositoryMgmtControllerResolveToCompetenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    repositoryMgmtControllerResolveToCompetencies(body, repositoryId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling repositoryMgmtControllerResolveToCompetencies");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling repositoryMgmtControllerResolveToCompetencies");
      }

      let pathParams = {
        'repositoryId': repositoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompetenceListDto;

      return this.apiClient.callApi(
        '/repositories/{repositoryId}/resolveUberCompetencies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the repositoryMgmtControllerSearchForRepositories operation.
     * @callback moduleapi/CompetenciesApi~repositoryMgmtControllerSearchForRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepositoryListDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RepositorySearchDto} body 
     * @param {module:api/CompetenciesApi~repositoryMgmtControllerSearchForRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    repositoryMgmtControllerSearchForRepositories(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling repositoryMgmtControllerSearchForRepositories");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepositoryListDto;

      return this.apiClient.callApi(
        '/repositories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}