/*
 * Competence Repository
 * The API description of the Competence Repository.
 *
 * OpenAPI spec version: 0.3.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The LearningObjectDto model module.
 * @module model/LearningObjectDto
 * @version 0.3.2
 */
export class LearningObjectDto {
  /**
   * Constructs a new <code>LearningObjectDto</code>.
   * @alias module:model/LearningObjectDto
   * @class
   * @param id {String} 
   * @param loRepositoryId {String} 
   * @param name {String} 
   * @param requiredCompetencies {Array.<String>} 
   * @param requiredUeberCompetencies {Array.<String>} 
   * @param offeredCompetencies {Array.<String>} 
   * @param offeredUeberCompetencies {Array.<String>} 
   */
  constructor(id, loRepositoryId, name, requiredCompetencies, requiredUeberCompetencies, offeredCompetencies, offeredUeberCompetencies) {
    this.id = id;
    this.loRepositoryId = loRepositoryId;
    this.name = name;
    this.requiredCompetencies = requiredCompetencies;
    this.requiredUeberCompetencies = requiredUeberCompetencies;
    this.offeredCompetencies = offeredCompetencies;
    this.offeredUeberCompetencies = offeredUeberCompetencies;
  }

  /**
   * Constructs a <code>LearningObjectDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/LearningObjectDto} obj Optional instance to populate.
   * @return {module:model/LearningObjectDto} The populated <code>LearningObjectDto</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new LearningObjectDto();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('loRepositoryId'))
        obj.loRepositoryId = ApiClient.convertToType(data['loRepositoryId'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('requiredCompetencies'))
        obj.requiredCompetencies = ApiClient.convertToType(data['requiredCompetencies'], ['String']);
      if (data.hasOwnProperty('requiredUeberCompetencies'))
        obj.requiredUeberCompetencies = ApiClient.convertToType(data['requiredUeberCompetencies'], ['String']);
      if (data.hasOwnProperty('offeredCompetencies'))
        obj.offeredCompetencies = ApiClient.convertToType(data['offeredCompetencies'], ['String']);
      if (data.hasOwnProperty('offeredUeberCompetencies'))
        obj.offeredUeberCompetencies = ApiClient.convertToType(data['offeredUeberCompetencies'], ['String']);
    }
    return obj;
  }
}

/**
 * @member {String} id
 */
LearningObjectDto.prototype.id = undefined;

/**
 * @member {String} loRepositoryId
 */
LearningObjectDto.prototype.loRepositoryId = undefined;

/**
 * @member {String} name
 */
LearningObjectDto.prototype.name = undefined;

/**
 * @member {String} description
 */
LearningObjectDto.prototype.description = undefined;

/**
 * @member {Array.<String>} requiredCompetencies
 */
LearningObjectDto.prototype.requiredCompetencies = undefined;

/**
 * @member {Array.<String>} requiredUeberCompetencies
 */
LearningObjectDto.prototype.requiredUeberCompetencies = undefined;

/**
 * @member {Array.<String>} offeredCompetencies
 */
LearningObjectDto.prototype.offeredCompetencies = undefined;

/**
 * @member {Array.<String>} offeredUeberCompetencies
 */
LearningObjectDto.prototype.offeredUeberCompetencies = undefined;

