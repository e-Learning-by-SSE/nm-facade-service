/*
 * Competence Repository
 * The API description of the Competence Repository.
 *
 * OpenAPI spec version: 0.3.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {LearningObjectDto} from './LearningObjectDto';
import {LearningObjectGroupDto} from './LearningObjectGroupDto';
import {LoGoalDto} from './LoGoalDto';

/**
 * The LoRepositoryDto model module.
 * @module model/LoRepositoryDto
 * @version 0.3.2
 */
export class LoRepositoryDto {
  /**
   * Constructs a new <code>LoRepositoryDto</code>.
   * @alias module:model/LoRepositoryDto
   * @class
   * @param id {String} 
   * @param name {String} 
   * @param owner {String} 
   * @param learningObjects {Array.<module:model/LearningObjectDto>} 
   * @param learningObjectsGroups {Array.<module:model/LearningObjectGroupDto>} 
   * @param goals {Array.<module:model/LoGoalDto>} 
   */
  constructor(id, name, owner, learningObjects, learningObjectsGroups, goals) {
    this.id = id;
    this.name = name;
    this.owner = owner;
    this.learningObjects = learningObjects;
    this.learningObjectsGroups = learningObjectsGroups;
    this.goals = goals;
  }

  /**
   * Constructs a <code>LoRepositoryDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/LoRepositoryDto} obj Optional instance to populate.
   * @return {module:model/LoRepositoryDto} The populated <code>LoRepositoryDto</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new LoRepositoryDto();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('owner'))
        obj.owner = ApiClient.convertToType(data['owner'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('learningObjects'))
        obj.learningObjects = ApiClient.convertToType(data['learningObjects'], [LearningObjectDto]);
      if (data.hasOwnProperty('learningObjectsGroups'))
        obj.learningObjectsGroups = ApiClient.convertToType(data['learningObjectsGroups'], [LearningObjectGroupDto]);
      if (data.hasOwnProperty('goals'))
        obj.goals = ApiClient.convertToType(data['goals'], [LoGoalDto]);
    }
    return obj;
  }
}

/**
 * @member {String} id
 */
LoRepositoryDto.prototype.id = undefined;

/**
 * @member {String} name
 */
LoRepositoryDto.prototype.name = undefined;

/**
 * @member {String} owner
 */
LoRepositoryDto.prototype.owner = undefined;

/**
 * @member {String} description
 */
LoRepositoryDto.prototype.description = undefined;

/**
 * @member {Array.<module:model/LearningObjectDto>} learningObjects
 */
LoRepositoryDto.prototype.learningObjects = undefined;

/**
 * @member {Array.<module:model/LearningObjectGroupDto>} learningObjectsGroups
 */
LoRepositoryDto.prototype.learningObjectsGroups = undefined;

/**
 * @member {Array.<module:model/LoGoalDto>} goals
 */
LoRepositoryDto.prototype.goals = undefined;

