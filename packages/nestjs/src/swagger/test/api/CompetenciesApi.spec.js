/*
 * Competence Repository
 * The API description of the Competence Repository.
 *
 * OpenAPI spec version: 0.3.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CompetenceRepositoryApi);
  }
}(this, function(expect, CompetenceRepositoryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CompetenceRepositoryApi.CompetenciesApi();
  });

  describe('(package)', function() {
    describe('CompetenciesApi', function() {
      describe('repositoryMgmtControllerAddCompetence', function() {
        it('should call repositoryMgmtControllerAddCompetence successfully', function(done) {
          // TODO: uncomment, update parameter values for repositoryMgmtControllerAddCompetence call and complete the assertions
          /*

          instance.repositoryMgmtControllerAddCompetence(body, repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.CompetenceDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repositoryMgmtControllerAddUeberCompetence', function() {
        it('should call repositoryMgmtControllerAddUeberCompetence successfully', function(done) {
          // TODO: uncomment, update parameter values for repositoryMgmtControllerAddUeberCompetence call and complete the assertions
          /*

          instance.repositoryMgmtControllerAddUeberCompetence(body, repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.UnResolvedUeberCompetenceDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repositoryMgmtControllerCreateRepository', function() {
        it('should call repositoryMgmtControllerCreateRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for repositoryMgmtControllerCreateRepository call and complete the assertions
          /*

          instance.repositoryMgmtControllerCreateRepository(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.RepositoryDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repositoryMgmtControllerGetCompetence', function() {
        it('should call repositoryMgmtControllerGetCompetence successfully', function(done) {
          // TODO: uncomment, update parameter values for repositoryMgmtControllerGetCompetence call and complete the assertions
          /*

          instance.repositoryMgmtControllerGetCompetence(competenceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.CompetenceDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repositoryMgmtControllerGetUberCompetence', function() {
        it('should call repositoryMgmtControllerGetUberCompetence successfully', function(done) {
          // TODO: uncomment, update parameter values for repositoryMgmtControllerGetUberCompetence call and complete the assertions
          /*

          instance.repositoryMgmtControllerGetUberCompetence(uebercompetenceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.UnResolvedUeberCompetenceDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repositoryMgmtControllerListRepositories', function() {
        it('should call repositoryMgmtControllerListRepositories successfully', function(done) {
          // TODO: uncomment repositoryMgmtControllerListRepositories call and complete the assertions
          /*

          instance.repositoryMgmtControllerListRepositories(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.RepositoryListDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repositoryMgmtControllerLoadRepository', function() {
        it('should call repositoryMgmtControllerLoadRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for repositoryMgmtControllerLoadRepository call and complete the assertions
          /*

          instance.repositoryMgmtControllerLoadRepository(repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.UnresolvedRepositoryDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repositoryMgmtControllerLoadResolvedRepository', function() {
        it('should call repositoryMgmtControllerLoadResolvedRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for repositoryMgmtControllerLoadResolvedRepository call and complete the assertions
          /*

          instance.repositoryMgmtControllerLoadResolvedRepository(repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.ResolvedRepositoryDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repositoryMgmtControllerModify', function() {
        it('should call repositoryMgmtControllerModify successfully', function(done) {
          // TODO: uncomment, update parameter values for repositoryMgmtControllerModify call and complete the assertions
          /*

          instance.repositoryMgmtControllerModify(body, repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.UnResolvedUeberCompetenceDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repositoryMgmtControllerResolveToCompetencies', function() {
        it('should call repositoryMgmtControllerResolveToCompetencies successfully', function(done) {
          // TODO: uncomment, update parameter values for repositoryMgmtControllerResolveToCompetencies call and complete the assertions
          /*

          instance.repositoryMgmtControllerResolveToCompetencies(body, repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.CompetenceListDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repositoryMgmtControllerSearchForRepositories', function() {
        it('should call repositoryMgmtControllerSearchForRepositories successfully', function(done) {
          // TODO: uncomment, update parameter values for repositoryMgmtControllerSearchForRepositories call and complete the assertions
          /*

          instance.repositoryMgmtControllerSearchForRepositories(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.RepositoryListDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
