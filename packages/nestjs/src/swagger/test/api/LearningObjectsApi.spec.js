/*
 * Competence Repository
 * The API description of the Competence Repository.
 *
 * OpenAPI spec version: 0.3.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CompetenceRepositoryApi);
  }
}(this, function(expect, CompetenceRepositoryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CompetenceRepositoryApi.LearningObjectsApi();
  });

  describe('(package)', function() {
    describe('LearningObjectsApi', function() {
      describe('loRepositoryControllerAddGoal', function() {
        it('should call loRepositoryControllerAddGoal successfully', function(done) {
          // TODO: uncomment, update parameter values for loRepositoryControllerAddGoal call and complete the assertions
          /*

          instance.loRepositoryControllerAddGoal(body, repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.LoGoalDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loRepositoryControllerAddLoGroup', function() {
        it('should call loRepositoryControllerAddLoGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for loRepositoryControllerAddLoGroup call and complete the assertions
          /*

          instance.loRepositoryControllerAddLoGroup(body, repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.LearningObjectGroupDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loRepositoryControllerCreateLearningObject', function() {
        it('should call loRepositoryControllerCreateLearningObject successfully', function(done) {
          // TODO: uncomment, update parameter values for loRepositoryControllerCreateLearningObject call and complete the assertions
          /*

          instance.loRepositoryControllerCreateLearningObject(body, repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.LearningObjectDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loRepositoryControllerCreateRepository', function() {
        it('should call loRepositoryControllerCreateRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for loRepositoryControllerCreateRepository call and complete the assertions
          /*

          instance.loRepositoryControllerCreateRepository(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.ShallowLoRepositoryDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loRepositoryControllerGetLoGroup', function() {
        it('should call loRepositoryControllerGetLoGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for loRepositoryControllerGetLoGroup call and complete the assertions
          /*

          instance.loRepositoryControllerGetLoGroup(groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.LearningObjectGroupDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loRepositoryControllerListRepositories', function() {
        it('should call loRepositoryControllerListRepositories successfully', function(done) {
          // TODO: uncomment loRepositoryControllerListRepositories call and complete the assertions
          /*

          instance.loRepositoryControllerListRepositories(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.LoRepositoryListDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loRepositoryControllerLoadLearningObject', function() {
        it('should call loRepositoryControllerLoadLearningObject successfully', function(done) {
          // TODO: uncomment, update parameter values for loRepositoryControllerLoadLearningObject call and complete the assertions
          /*

          instance.loRepositoryControllerLoadLearningObject(learningObjectId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.LearningObjectDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loRepositoryControllerLoadRepository', function() {
        it('should call loRepositoryControllerLoadRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for loRepositoryControllerLoadRepository call and complete the assertions
          /*

          instance.loRepositoryControllerLoadRepository(repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.LoRepositoryDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loRepositoryControllerModifyLearningObject', function() {
        it('should call loRepositoryControllerModifyLearningObject successfully', function(done) {
          // TODO: uncomment, update parameter values for loRepositoryControllerModifyLearningObject call and complete the assertions
          /*

          instance.loRepositoryControllerModifyLearningObject(body, repositoryId, learningObjectId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.LearningObjectDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loRepositoryControllerModifyRepository', function() {
        it('should call loRepositoryControllerModifyRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for loRepositoryControllerModifyRepository call and complete the assertions
          /*

          instance.loRepositoryControllerModifyRepository(body, repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.LoRepositoryDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loRepositoryControllerShowGoal', function() {
        it('should call loRepositoryControllerShowGoal successfully', function(done) {
          // TODO: uncomment, update parameter values for loRepositoryControllerShowGoal call and complete the assertions
          /*

          instance.loRepositoryControllerShowGoal(goalId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CompetenceRepositoryApi.LoGoalDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
